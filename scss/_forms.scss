.form-group {
  position: relative; // For floating labels
}

// Inputs

.form-control {
  margin-top: $input-margin-top; // For label
  margin-bottom: $form-text-margin-top + .8rem; // For form-text
  background: no-repeat center bottom, center calc(100% - 1px);
  background-size: $form-control-bg-size;
  padding: $input-padding-y 0;
  transition: background 0s ease-out;

  @include form-control-underline-bg-image(theme-color(primary));

  &:focus,
  .is-focused & {
    background-size: $form-control-bg-size-active;
    transition-duration: 0.3s;
  }

  @each $status in $statuses {

    // Text color
    @if ($form-control-keep-input-status-color == true) {
      .has-#{$status} & {
        color: theme-color($status);
      }
    }

    // Underline
    .has-#{$status}.is-focused &, /* show status color when input is focused */
    .has-#{$status}.keep-underline & /* keep status color when input is empty */
    {
      background-size: $form-control-bg-size-active;
      @include form-control-underline-bg-image(theme-color($status));
    }
    @if ($form-control-keep-underline-status-color == true) {
      .has-#{$status}.is-filled & /* keep status color when input is filled*/
      {
        background-size: $form-control-bg-size-active;
        @include form-control-underline-bg-image(theme-color($status));
      }
    }
  }

  // Exclusions

  .form-inline & {
    margin-top: 0;
    margin-bottom: 0;
  }

  .navbar & {
    background-color: inherit;
  }

  .navbar.navbar-dark & {
    @include form-control-underline-bg-image($yiq-text-light, $yiq-text-light);
    color: $yiq-text-light;
    &::placeholder {
      color: $grey-300;
    }
  }
}

select:not([type=multiple]).form-control {
  @include appearance(none);
  background: no-repeat center bottom, center calc(100% - 1px), no-repeat right; /*top 1em right 5px*/
  background-size: $form-control-select-bg-size;
  @include form-control-select-underline-bg-image(theme-color(primary), url("https://storage.googleapis.com/material-icons/external-assets/v4/icons/svg/ic_arrow_drop_down_black_24px.svg"));
}

// Label

.label {
  position: absolute;
  @include label-static();
  pointer-events: none;
  transition: 0.3s ease all;

  color: $label-color;

  .is-focused & {
    color: theme-color(primary);
  }

  &.label-floating {
    font-size: 1rem;
    margin-top: 0;
    top: $input-margin-top + $input-padding-y;

    .is-focused &,
    .is-filled & {
      @include label-static();
    }
  }

  // Label color
  @each $status in $statuses {
    .has-#{$status}.is-focused &,
    .has-#{$status}.is-filled.is-focused & {
      color: theme-color($status);
    }

    @if ($label-keep-status-color == true) {
      .has-#{$status}.is-filled & {
        color: theme-color($status);
      }
    }
  }
}

// Input Message

.form-text {
  position: absolute;
  bottom: 0;
  margin-top: 0;
  color: $grey;

  @each $status in $statuses {
    .has-#{$status}.is-focused &,
    .has-#{$status}.is-filled.is-focused & {
      color: theme-color($status);
    }

    @if ($form-text-keep-status-color-negative-only == false and $form-text-keep-status-color == true) {
      .has-#{$status}.is-filled & {
        color: theme-color($status);
      }
    }
  }

  @if ($form-text-keep-status-color-negative-only == true) {
    .has-warning.is-filled & {
      color: theme-color(warning);
    }
    .has-danger.is-filled & {
      color: theme-color(danger);
    }
  }
}

// Checkboxes and radios

.form-check {
  //position: relative;
  //display: block;
  //padding-left: $form-check-input-gutter;
}

.form-check-input {
  color: inherit;
  font-size: $checkbox-icon-font-size;
  width: $checkbox-icon-height;
  height: $checkbox-icon-height;
  line-height: $checkbox-icon-height;
  @include appearance(none);

  &:focus {
    outline-style: none;
  }

  &:before,
  &:checked:before {
    font-family: $bmt-material-icons-font-family-name;
  }

  &:checked:before {
    color: theme-color(primary);
  }
}

input[type=checkbox].form-check-input {
  & {
    @include svg-icon(preserve, map-get($bmt-svg-icons, check-box-outline-blank));
  }

  &:checked {
    @include svg-icon(map-get($theme-colors, primary), map-get($bmt-svg-icons, check-box));
  }
}

input[type=radio].form-check-input {
  &:before {
    content: map-get($bmt-icons, radio-button-unchecked);
  }

  &:checked:before {
    content: map-get($bmt-icons, radio-button-checked);
  }
}

